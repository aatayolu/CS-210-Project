# -*- coding: utf-8 -*-
"""Iwanttosleep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UfRaALQekfrVBn-kgqKof4Nx7M44MKCb

Hypothesis H0:I increase the frequency of recording sleep If I am getting less hours of sleep
"""

import pandas as pd
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

"""I have transformed my XML file into a CSV file,using https://www.ericwolter.com/projects/apple-health-export/. However, there is unnecessary column present in the Excel sheet, necessitating manual deletion."""

file_path = "/content/sleep_analysis.csv"
df = pd.read_csv(file_path)
df.head()

unique_sourcenames = df['sourcename'].unique()

# Display the unique values
print("Unique values in sourcename column:")
for sourcename in unique_sourcenames:
    print(sourcename)

# Filter rows where 'sourcename' is equal to the specified value
new_df = df[df['sourcename'] == sourcename].copy()

# Print the specified sourcename
print("Sourcename:", sourcename)

# Display the data types of columns in the filtered DataFrame
column_data_types = new_df.dtypes
print("\nData types of columns in the filtered DataFrame:")
print(column_data_types)


new_df.head()

# Convert 'creationdate', 'startdate', and 'enddate' to datetime
new_df['creationdate'] = pd.to_datetime(new_df['creationdate'])
new_df['startdate'] = pd.to_datetime(new_df['startdate'])
new_df['enddate'] = pd.to_datetime(new_df['enddate'])

column_data_types = new_df.dtypes
print("\nData types of columns in the filtered DataFrame:")
print(column_data_types)

sleep_analysis_values = new_df[new_df['value'].str.contains("HKCategoryValueSleepAnalysis")]['value'].unique()

print("\nUnique values in 'value' column after HKCategoryValueSleepAnalysis:")
for value in sleep_analysis_values:
    print(value)

# Calculate the duration and create a new 'duration' column
new_df['duration'] = (new_df['enddate'] - new_df['startdate']).dt.total_seconds() / 60

# Display the data types of columns in the filtered DataFrame
column_data_types = new_df.dtypes
print("\nData types of columns in the filtered DataFrame:")
print(column_data_types)

# Display the first few rows of the DataFrame with the new 'duration' column
new_df.head()

# Assuming 'daily_df' is your DataFrame with the calculated sleep categories

# Create a new DataFrame with unique values of 'creationdate'
daily_df = pd.DataFrame({'creationdate': new_df['creationdate'].unique()})

# Sleep categories to check for
sleep_categories = [
    'HKCategoryValueSleepAnalysisAsleepUnspecified',
    'HKCategoryValueSleepAnalysisAwake',
    'HKCategoryValueSleepAnalysisAsleepCore',
    'HKCategoryValueSleepAnalysisAsleepDeep',
    'HKCategoryValueSleepAnalysisAsleepREM',
    'HKCategoryValueSleepAnalysisInBed'
]

# Iterate through rows in 'daily_df' and calculate sleep categories based on conditions
for category in sleep_categories:
    daily_df[category.replace('HKCategoryValueSleepAnalysis', '')] = daily_df.apply(
        lambda row: new_df[
            (new_df['creationdate'] == row['creationdate']) &
            (new_df['value'] == category)
        ]['duration'].sum(), axis=1
    )

# Convert 'creationdate' to datetime
daily_df['creationdate'] = pd.to_datetime(daily_df['creationdate'])

# Extract month and year from 'creationdate' and create a new 'month_year' column
daily_df['month_year'] = daily_df['creationdate'].dt.to_period('M')

# Create a new DataFrame for monthly data
monthly_df = daily_df.groupby('month_year').agg({'AsleepUnspecified': 'sum', 'Awake': 'sum', 'AsleepCore': 'sum', 'AsleepDeep': 'sum', 'AsleepREM': 'sum', 'InBed': 'sum', 'creationdate': pd.Series.nunique}).reset_index()
monthly_df.columns = ['month_year', 'AsleepUnspecified', 'Awake', 'AsleepCore', 'AsleepDeep', 'AsleepREM', 'InBed', 'days']

# Print the first few rows of the new DataFrames
print("First few rows of daily_df:")
print(daily_df.head())

print("\nFirst few rows of monthly_df:")
print(monthly_df.head())

inbed_mean = daily_df['InBed'].mean()
print("Mean duration for daily InBed:", inbed_mean)

columns_to_divide = ['AsleepUnspecified', 'Awake', 'AsleepCore', 'AsleepDeep', 'AsleepREM', 'InBed']
monthly_df[columns_to_divide] = monthly_df[columns_to_divide].div(monthly_df['days'], axis=0)

print("\nFirst few rows of monthly_df:")
print(monthly_df.head())

stacked_categories = ['AsleepUnspecified', 'Awake', 'AsleepCore', 'AsleepDeep', 'AsleepREM']

# Set up color mapping for each category
colors = ['orange', 'red', 'green', 'blue', 'purple']

# Plot a stacked bar chart with wider bars
plt.figure(figsize=(12, 6))

bottom = 0
# Iterate over categories
for i, category in enumerate(stacked_categories):
    plt.bar(
        monthly_df['month_year'].dt.to_timestamp(),
        monthly_df[category],
        label=category,
        color=colors[i],
        bottom=bottom,
        width=20  # Adjust the width as needed
    )
    bottom += monthly_df[category]  # Update the bottom array

# Calculate the mean 'InBed' duration separately
mean_inbed = daily_df['InBed'].mean()

# Add a line for the mean 'InBed' duration
plt.axhline(y=mean_inbed, color='black', linestyle='--', label=f'Mean ({mean_inbed:.2f} mins)')

plt.title('Monthly Sleep Categories with the Mean')
plt.xlabel('Months')
plt.ylabel('Duration (minutes)')
plt.xticks(rotation=45)

# Modify x-axis labels to include month, year, and days
plt.xticks(
    monthly_df['month_year'].dt.to_timestamp(),
    [f'{month.strftime("%B")} ({month.year})\n{days} days collected' for month, days in zip(monthly_df['month_year'].dt.to_timestamp(), monthly_df['days'])],
    rotation=45
)

plt.legend(loc='upper left', bbox_to_anchor=(1, 1))

# Show the plot
plt.tight_layout()
plt.show()

# Exclude 'InBed' from the sleep categories
stacked_categories = [
    'AsleepUnspecified',
    'Awake',
    'AsleepCore',
    'AsleepDeep',
    'AsleepREM'
]

# Set up color mapping for each category
colors = ['orange', 'red', 'green', 'blue', 'purple']

# Plot a stacked bar chart
plt.figure(figsize=(12, 6))
bottom = 0  # Variable to keep track of the bottom values for stacking

for i, category in enumerate(stacked_categories):
    plt.bar(
        daily_df['creationdate'],
        daily_df[category],
        label=category,
        color=colors[i],
        bottom=bottom
    )
    bottom += daily_df[category]


# Add a line for the mean 'InBed' duration
mean_inbed = daily_df['InBed'].mean()
plt.axhline(y=mean_inbed, color='black', linestyle='--', label=f'Mean InBed ({mean_inbed:.2f} mins)')

plt.title('Daily Sleep Categories with Mean Duration')
plt.xlabel('Day')
plt.ylabel('Duration (minutes)')
plt.xticks(rotation=45)
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
from scipy.stats import pearsonr

# Assuming 'monthly_df' is your DataFrame with the calculated monthly sleep categories
# ...

# Filter months where 'days' are above 15
filtered_monthly_df = monthly_df[monthly_df['days'] > 15]
reverse_filtered_monthly_df = monthly_df[monthly_df['days'] <= 15]

# Calculate correlation coefficient and p-value
correlation_coefficient, p_value = pearsonr(filtered_monthly_df['InBed'], filtered_monthly_df['days'])

# Print the results
print(f"Correlation Coefficient of the months that has more than 15 days of recording: {correlation_coefficient}")
print(f"P-value: {p_value}")

# Check for statistical significance
if p_value < 0.05:
    print("The correlation is statistically significant.")
else:
    print("There is no significant correlation.")


# Calculate correlation coefficient and p-value
correlation_coefficient, p_value = pearsonr(reverse_filtered_monthly_df['InBed'], reverse_filtered_monthly_df['days'])

# Print the results
print(f"Correlation Coefficient of the months that has less than 16 days of recording: {correlation_coefficient}")
print(f"P-value: {p_value}")

# Check for statistical significance
if p_value < 0.05:
    print("The correlation is statistically significant.")
else:
    print("There is no significant correlation.")

"""H0 rejected since there is no correlation found frequency of recording and data"""